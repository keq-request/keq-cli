import { Keq } from 'keq'
import { request } from '{{{options.request}}}'
{{#each
  (r__uniq
    (r__flatten
      (r__map
        (pick-ref)
        (r__concat
          (json-path "$.responses[*].content[*].schema" operation)
          (json-path "$.requestBody.content[*].schema" operation)
        )
      )
    )
  )
}}
import { {{ref-name this}} } from "./components/schemas/{{change-case @root.options.fileNamingStyle (ref-name this)}}"
{{/each}}

{{~#*inline "ResponseInterfaceName"~}}
Response_{{code}}_
{{~#if (r__equals contentType '*/*')~}}
all
{{~else~}}
{{~r__replace '/' '_' contentType~}}
{{/if}}
{{~/inline~}}

{{~#*inline "ResponseUnionInterface"~}}
  {{~#each operation.responses as |responseBody code|~}}
    {{~#each responseBody.content as |content contentType|~}}
      {{~> ResponseInterfaceName code=code contentType=contentType~}}
      {{~#unless @last}} | {{/unless~}}
    {{~else~}}
      any
    {{~/each~}}
    {{~#unless @last}} | {{/unless~}}
  {{~else~}}
    any
  {{~/each~}}
{{~/inline~}}

{{#each operation.responses as |responseBody code|~}}
{{#each responseBody.content as |content contentType|~}}
{{#r__define "RESPONSE_INTERFACE_NAME"}}{{> ResponseInterfaceName code=code contentType=contentType}}{{/r__define}}
{{> t_interface name=RESPONSE_INTERFACE_NAME schema=content.schema}}
{{/each~}}
{{/each~}}

{{#*inline "parameterProperty"}}
  {{name}}{{#unless required}}?{{/unless}}: {{> t_shape schema}}
{{/inline}}

interface QueryArg {
  {{#if operation.parameters}}
  {{#each (r__filter (r__propEq "in" "query") operation.parameters)}}
  {{> parameterProperty}}
  {{/each}}
  {{/if}}
}

interface ParamArg {
  {{#if operation.parameters}}
  {{#each (r__filter (r__propEq "in" "path") operation.parameters)}}
  {{> parameterProperty}}
  {{/each}}
  {{/if}}
}

interface HeaderArg {
  {{#if operation.parameters}}
  {{#each (r__filter (r__propEq "in" "header") operation.parameters)}}
  {{> parameterProperty}}
  {{/each}}
  {{/if}}
}


{{> t_comments operation}}
export function {{operation-id pathname method operation}}(arg?: QueryArg & ParamArg & HeaderArg
{{~#unless (r__isNil operation.requestBody.content)}}
 & (
{{~#each (r__map (r__prop "schema") (r__values operation.requestBody.content))}}
{{> t_shape this}}{{#unless @last}} | {{/unless}}
{{~/each~}}
)
{{~/unless~}}
): Keq<{{> ResponseUnionInterface}}> {
  const req = request.{{method}}
  {{~#unless (r__isEmpty (json-path "$.responses[*].content[*]" operation))~}}
  <{{> ResponseUnionInterface}}>
  {{~/unless~}}
  ("{{{r__replace (regexp "{(.*?)}" flags="g") ":$1" pathname}}}")
    .option('module', {
      name: "{{{moduleName}}}",
      pathname: "{{{r__replace (regexp "{(.*?)}" flags="g") ":$1" pathname}}}",
    })

  {{#if operation.parameters}}
  {{#each (r__filter (r__propEq "in" "query") operation.parameters)}}
  {{#if @first}}
  const queryWrap = (value: any) => typeof value === 'boolean' ? String(value) : value

  {{/if}}
  if (arg && "{{name}}" in arg) req.query("{{name}}", queryWrap(arg["{{name}}"]))
  {{/each~}}

  {{#each (r__filter (r__propEq "in" "header") operation.parameters)}}
  if (arg && "{{name}}" in arg) req.set("{{name}}", arg["{{name}}"])
  {{/each~}}

  {{#each (r__filter (r__propEq "in" "path") operation.parameters)}}
  if (arg && "{{name}}" in arg) req.params("{{name}}", String(arg["{{name}}"]))
  {{/each~}}
  {{/if}}

  {{#each (r__values operation.requestBody.content)}}
  {{~#if this.schema}}
  {{#with (parse-schema this.schema)}}
  {{#each properties}}
  if (arg && "{{@key}}" in arg) req.send({ "{{@key}}": arg["{{@key}}"] })
  {{/each~}}
  {{~/with~}}
  {{~/if~}}
  {{~/each}}
  return req
}
